# Parte 03 — Listas

**Índice**

<!-- Índice actualizado -->

1. [Navegación según Expo](#navegación-según-expo)
2. [Snippet](#snippet)
3. [Imagen por URL](#imagen-por-url)
4. [Ejemplo básico de un input y cómo procesarlo (ej. Conversor)](#ejemplo-básico-de-un-input-y-cómo-procesarlo-ej-conversor)

##

inicia en https://youtu.be/GaXEzkDs6Yk?t=8600

![borrar despues](image.png)

## FlatList

https://reactnative.dev/docs/flatlist

-Segun la docn oficial, layout acrga primero asi existe¡a un index, si exite index,el carga primero

-Se crear un menu en index para que de ahi se pueda esgoer que pantalla ir

```jsx
import { FlatList } from "react-native";
...
export default function Componente() {
  const dataRutas = [
    { key: 1, name: "(1-conversor)" },
    { key: 2, name: "(2-listas)" },
  ];

  const renderItem = ({ item }) => <Title>Título: {item.name}</Title>;

  return (
    ...
      <FlatList
        data={dataRutas}
        renderItem={renderItem}
        keyExtractor={(data) => data.key}
      />
    ...
  );
}

const Title = styled.Text`
  font-size: 20px;
`;

```

## Uso de href para pantallas

- Se puede usar href y navegar a cada carpet sin usar rl "()" para indicar grupo, pero es cuestion de gustos, con href se puede dispensar de poenrlo como grupo

```tsx
import { Link } from "expo-router";
...
export default function Componente() {
  const dataRutas = [
    { key: 1, name: "(1-conversor)", href: "/(1-conversor)" },
    { key: 2, name: "(2-listas)", href: "/(2-listas)" },
  ];

  const renderItem = ({ item }) => {
    return (
      <Link href={item.href}>
        <Title>Título: {item.name}</Title>
      </Link>
    );
  };

  return (
    ...
      <FlatList
        data={dataRutas}
        renderItem={renderItem}
        keyExtractor={(data) => data.key}
        ...
  );

}
...


```

## Styled en componentes no nativos

Se usa la sintaxis styled(<Componete no nativo>) para que lo tome com estilo y poder usarlo

```tsx
...
const renderItem = ({ item }) => {
    return (
      <LinkButton href={item.href}>
        <Title>Título: {item.name}</Title>
      </LinkButton>
    );
  };
...
const LinkButton = styled(Link)`
  padding: 15px;
  margin-bottom: 10px;
  border-radius: 20px;
  flex-direction: row;
  border: 2px solid #cecece;
  width: 100%;
`;
```

## Vector icons

Pagina de iconos, donde poder buscar iconos: https://icons.expo.fyi/Index
Si se usa Materual Icons asegurarse que el icono a usa sea de ese grupo

```tsx
import { MaterialIcons } from "@expo/vector-icons";
...
        <MaterialIcons name="arrow-forward-ios" size={24} color="black" />
```

## Safe Area Expo

En el video usa safe area de nativo, pero en expo tiene uno quenos arhorra elt rabajo de la logica, usansao SafeRea de expo

```tsx
...
import { SafeAreaView } from "react-native-safe-area-context";

export default function Componente() {
  ...
  return (
    <RootArea edges={["top", "left", "right"]}>
      <Title>Componente</Title>
      <Lista
        data={dataRutas}
        renderItem={renderItem}
        keyExtractor={(data) => data.key}
      />
    </RootArea>
  );
}

const RootArea = styled(SafeAreaView)`
  flex: 1;
  align-items: center;
`;
...
```

## Satus bar

En caso se quiera modifica existe status bar

```tsx
...
import { StatusBar } from "expo-status-bar";
...
      <StatusBar style="dark" />
...
```

## Router vs UseRouter

- User Router se usa cuando lo quieres en codigo pero si solo es en la aprte visual se puede usa route

## Ejemplo de falt list y section list

```tsx
import { FlatList, SectionList } from "react-native";
...

export default function Componente() {
  const data = [
    { product: "Cervesa", price: "S/.10.00" },
    ...
  ];

  const dataSecionList = [
    {
      title: "Bebidas",
      data: [
        { product: "Cervesa", price: "S/.10.00" },
        ...
      ],
    },
    {
      title: "Comida",
      data: [
        { product: "Ceviche", price: "S/.20.00" },
        ...
      ],
    },
  ];

  const renderItem = ({ item }) => (
    <Item>
      <Text>{item.product}</Text>
      <Text>{item.price}</Text>
    </Item>
  );

  const renderHeader = ({ section }) => <Text>{section.title}</Text>;

  return (
    <Contenedor>
      <Title>FLat List</Title>
      <FlatList
        data={data}
        renderItem={renderItem}
        keyExtractor={(item) => item.product}
      />

      <Title style={{ paddingTop: 30 }}>Section List</Title>
      <SectionList
        sections={dataSecionList}
        renderItem={renderItem}
        renderSectionHeader={renderHeader}
        keyExtractor={(item) => item.product}
      />
    </Contenedor>
  );
}
...
```
